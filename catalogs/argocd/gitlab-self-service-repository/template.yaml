apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: gitlab-self-service-repository
  title: Create a GitLab Self-Service Repository
  description: |
    This template automates the creation of a GitLab repository from a predefined skeleton,
    and sets up an ArgoCD application to synchronize changes from the repository automatically.
    It simplifies the process of integrating GitLab and ArgoCD, enabling self-service repository
    creation with seamless continuous deployment capabilities.
  tags:
    - gitlab
    - argocd
    - automation
    - devops
spec:
  owner: devops-team
  system: poc-examples
  type: ci-cd-integration
  parameters:

    - title: Repository Information
      ui:group: repository
      required:
        - organizationName
        - repositoryName
        - owner
      properties:
        repoUrl:
          title: Repository Url
          description: |
            The URL of the existing GitLab repository that will be linked to this application.
            Ensure the repository is hosted on one of the allowed GitLab instances. 
            The repository must contain the necessary application source code or ArgoCD configuration files.
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - gitlab.com
        organizationName:
          title: Application Name
          description: The name of the organization under which the repository will be created in GitLab.
          type: string
        repositoryName:
          title: Repository Url
          description: "The name of the new GitLab repository to hold your applications source code."
          type: string
        owner:
          type: string
          description: The owner of the repository. This is usually a team or individual responsible for managing the repository.
          ui:field: OwnerPicker

    - title: ArgCD Application Information
      ui:group: argocd
      required:
        - appName
        - repoUrl
        - argoInstance
        - namespace
        - path
      properties:
        appName:
          title: Application Name
          description: The name of the ArgoCD application that will manage the continuous deployment of your project.
          type: string
        repoUrl:
          title: Repository Url
          description: The GitLab repository URL that contains the source code for this application.
          type: string
        namespace:
          title: Application Namespace
          description: The Kubernetes namespace where the application will be deployed by ArgoCD.
          type: string
        argoInstance:
          title: ArgoCD Instance
          description: The ArgoCD instance that will manage this application. Choose from available instances.
          enum:
            - main
          type: string
        path:
          title: ArgoCD Path Field
          description: The path within the GitLab repository where the ArgoCD configuration files (manifests) are located.
          type: string

  steps:

    #######################
    ## Request Dynamic Data
    #######################
    - id: requestDynamicData
      name: Fetch Dynamic Data
      action: http:backstage:request
      input:
        method: 'POST'
        path: 'proxy/data/fetch'
        headers:
          Content-Type: 'application/json'
        body: |
          {
            "request": ["DOMAIN"]
          }

    # ##################################
    # ## Pull Self-Service Repo Skeleton
    # ##################################
    # - id: pullRepositorySkeleton
    #   name: Pull Self-Service Skeleton
    #   action: fetch:template
    #   input:
    #     url: './skeleton'

    # ########################
    # ## GENERATE CATALOG INFO
    # ########################
    # - id: templateCatalog
    #   name: Generate Catalog Info
    #   action: fetch:template
    #   input:
    #     url: ../../../skeletons/catalog-info/catalog.yaml
    #     values:
    #       orgName: ${{ parameters.organizationName }}
    #       repoName: ${{ parameters.repositoryName }}
    #       owner: ${{ parameters.owner }}
    #       system: "self-service"
    #       description: |
    #         ${{ parameters.description }}
    #       sourceControl: ${{ parameters.repoUrl }}

    # #################################
    # ## Create Self-Service Repository
    # #################################
    # - id: publish
    #   name: Create Self-Service Repository
    #   action: publish:gitlab
    #   input:
    #     allowedHosts:
    #       - 'gitlab.com'
    #     description: ${{ parameters.description }}
    #     repoUrl: gitlab.com?owner=${{ parameters.organizationName }}&repo=${{ parameters.repositoryName }}
    #     defaultBranch: main

    # ########################
    # ## Register Catalog Info
    # ########################
    # - id: registerCatalog
    #   name: Register Catalog Info
    #   action: catalog:register
    #   input:
    #     repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
    #     catalogInfoPath: /catalog-info.yaml

    ######################################
    ## Test ArgoCD Resources Configuration
    ######################################
    - id: create-argocd-resources
      name: Create ArgoCD Resources
      action: argocd:create-resources
      input:
        appName: ${{ parameters.appName }}
        argoInstance: ${{ parameters.argoInstance }}
        projectName: self-service
        namespace: langflow
        repoUrl: https://github.com/poc-examples/supporting-charts.git
        path: charts/langflow

  output:
    links:
      - title: Application
        url: https://argocd-instance/${{ parameters.argoInstance }}/applications/${{ parameters.appName }}
      - title: ArgoCD Instance
        icon: catalog
        url: https://argocd-instance/${{ parameters.argoInstance }}
    text:
      - title: Http Request Output
        content: |
          ${{ steps.requestDynamicData.output.body["DOMAIN"] }}
