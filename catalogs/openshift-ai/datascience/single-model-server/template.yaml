apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: single-model-server
  title: Red Hat OpenShift AI - Single Model Server
  description: |
    This template automates the deployment of a Single Model Server in Red Hat OpenShift AI. 
    It provides a scalable environment for serving a single AI/ML model, allowing teams to 
    quickly launch, manage, and scale their AI models in production. The template ensures 
    seamless integration with OpenShift AI services, offering support for continuous 
    deployment, model monitoring, and version management. Ideal for projects focused on 
    deploying one model at a time with optimized resources.
  tags:
    - openshift-ai
    - model-serving
    - automation
    - ai-workloads
    - mlops
    - argocd

spec:
  owner: data-science
  system: self-service
  type: Single-Model-Server
  parameters:

    - title: ArgoCD Selection
      ui:group: argocd
      required:
        - argoInstance
      properties:
        argoInstance:
          title: ArgoCD Instance
          description: The ArgoCD instance that will manage this application. Choose from available instances.
          enum:
            - main
          type: string

    - title: Model Serving Settings
      ui:group: data-model-serving
      required:
        - projectName
        - modelName
      properties:
        projectName:
          title: Project Name
          description: The project where the data connector is integrated.
          type: string
          pattern: "^[a-z][a-z0-9-]+$"
          minLength: 3
          maxLength: 30
        modelName:
          title: Model Name
          description: The name of the Model.
          type: string
          pattern: "^[a-z][a-z0-9-]+$"
          minLength: 3
          maxLength: 30

    - title: Model Serving Settings
      ui:group: data-model-serving
      required:
        - dataConnectorName
        - modelPath
      properties:
        dataConnectorName:
          title: Data Connector Name
          description: The name of the data connector.
          type: string
          pattern: "^[a-z][a-z0-9-]+$"
          minLength: 3
          maxLength: 30
        modelPath:
          title: Model Path
          description: The path to the Model in Data Connector.
          type: string

  steps:

    #######################
    ## Request Dynamic Data
    #######################
    - id: requestDynamicData
      name: Fetch Dynamic Data
      action: http:backstage:request
      input:
        method: 'POST'
        path: 'proxy/data/fetch'
        headers:
          Content-Type: 'application/json'
        body: |
          {
            "request": ["DOMAIN"]
          }

    ###########################
    ## Template the Application
    ###########################
    - id: applicationTemplate
      name: Template Helm Application
      action: fetch:template
      input:
        url: "../../../../skeletons/applications/helm/"
        targetPath: "projects/${{ parameters.projectName }}/"
        values:
          repoName: "${{ parameters.modelName }}-model-server"
          namespace: "${{ parameters.projectName }}"
          chart:
            name: "data-single-model-server"
            chartUrl: "https://poc-examples.github.io/supporting-charts"
            chartVersion: "0.1.1"
          projectName: "${{ parameters.projectName }}"
          automated:
            prune: true
            selfHeal: true
          createNamespace: "true"
          valuesObject: |
            serviceName: ${{ parameters.modelName }}
            servingRuntime: multi-gpu-vllm-runtime
            replicas: 1
            GPUCount: 2
            dataConnection:
              name: ${{ parameters.dataConnectorName }}
              modelPath: ${{ parameters.modelPath }}
            resources:
              cpu: "2"
              mem: 35Gi

    ##############
    ## Rename File
    ##############
    - id: changeTemplateName
      name: Change Template Name
      action: fs:rename
      input:
        files:
          - from: "projects/${{ parameters.projectName }}/application.yaml"
            to: "projects/${{ parameters.projectName }}/${{ parameters.modelName }}-model-server.yaml"

    ##########################
    ## Push Repository Changes
    ##########################
    - id: publishManifests
      name: Publishing to the Source Code Repository
      action: gitlab:repo:push
      input:
        allowedHosts:
          - 'gitlab.com'
        description: |
          placeholder
        repoUrl: gitlab.com?owner=self-provisioned&repo=manifests
        sourcePath: "./projects/${{ parameters.projectName }}"
        targetPath: "./projects/${{ parameters.projectName }}"
        branchName: main
        commitAction: create
        commitMessage: "Created ${{ parameters.modelName }} Model Server"

  output:
    links:
      - title: GitOps Application
        url: https://openshift-gitops-server-openshift-gitops.apps.${{ steps['requestDynamicData'].output.body["DOMAIN"] }}/applications/openshift-gitops/root-self-service
      - title: GitLab Repository
        url: https://gitlab.apps.${{ steps['requestDynamicData'].output.body["DOMAIN"] }}/self-provisioned/manifests.git
